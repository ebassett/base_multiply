base_multiply.py
2014-10-12 ejb

Here's a good start:
- quotient (ie. carry) and remainder (ie. number(?!)) from divmod
- input to divmod:
  - index of digit times index of digit
    - where what we are indexing into is the substring of 0-F that is appropriate for the base
  - the base

Now we just need to - hm, well, on second thought this is going to more complicated than I initially thought.
I was going to think about whether I should do right-to-left processing by just reversing the input string of digits,
 or by doing something fancier with a negative step.
But that's possibly premature.
Well, no, I guess I do have to address it now.
But let's start with a simple case, with only one number a more than one (ie. 2) digits.
And by just reversing the stings, for simplicity's sake. I may revisit that later.

Okay, so far so good; I've got it working when one number is multi-digit.

Next: handle both numbers being multi-digit.
Hm, that's actually a bit awkward, since I'm dealing with these things as strings.
I'll need to store the output string for each row (ie. result of multiplying x with the current digit of y),
appending an extra zero to the end (ie. one more zero than the one before)
And then I'll have to write an addition function.

Okay, wrote an base_addition module and imported it. (Symlinked the py file into this directory so I don't have to
muck about with add it's location to the library path.)

Implemented the loop over the other input's digits.
And it works! Woohoo!

Nope, no good.
Worked for all of my tests in base four.
But base-8 711x5007 includes '9's in the answer, which is nonsense.
And a base-16 test that should have had letters in the output didn't.
So, some closer thinking and debugging is required.

=> It was a trivial oversight, using the results of arithmetic operations directly instead of getting the character
at that index in the digits list.

NEXT:
- arg-handling:
  - take args if given on the commandline
  - else prompt for arg
- test suite

- Also sort out the IDE project and git repos, because I've got three different things semi-confounded here.

FUTURE:
- convert/refactor to object-oriented (for the exercise)






